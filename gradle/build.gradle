plugins {
    // Android项目构建插件
    id 'com.android.application'
}

// Android配置
android {
    // 签名信息配置: debug + release
    signingConfigs {
        debug {
            storeFile file('C:/Users/Administrator/test.keystore')
            storePassword '123456'
            keyAlias 'test'
            keyPassword '123456'
        }
        release {
            storeFile file('C:/Users/Administrator/test.keystore')
            storePassword '123456'
            keyAlias 'test'
            keyPassword '123456'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    // 使用的SDK版本
    compileSdkVersion 30
    // 使用的构建工具版本
    buildToolsVersion "30.0.3"

    // 默认配置, 用于所有渠道的默认值
    defaultConfig {
        // APP唯一包名
        applicationId "com.once.android.oreja"
        // 最低兼容SDK版本
        minSdkVersion 16
        // 目标SDK版本
        targetSdkVersion 30
        // 版本号
        versionCode 1
        // 版本名称
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    // 构建类型配置
    buildTypes {
        debug {
            shrinkResources false
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            buildConfigField "Boolean", "DEBUG_MODE", 'true'
        }
        release {
            //是否优化zip
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            //启用代码混淆
            minifyEnabled true
            //混淆规则配置文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //指明签名文件位置
            signingConfig signingConfigs.release
            buildConfigField "Boolean", "DEBUG_MODE", 'false'
        }
    }

    sourceSets {//目录指向配置, so文件
        main {
            jniLibs.srcDirs = ['libs']//指定lib库目录
        }
    }

    packagingOptions{
        //pickFirsts做用是 当有重复文件时 打包会报错 这样配置会使用第一个匹配的文件打包进入apk
        // 表示当apk中有重复的META-INF目录下有重复的LICENSE文件时  只用第一个 这样打包就不会报错
        pickFirsts = ['META-INF/LICENSE']

        //merges何必 当出现重复文件时 合并重复的文件 然后打包入apk
        //这个是有默认值得 merges = [] 这样会把默默认值去掉  所以我们用下面这种方式 在默认值后添加
        merge 'META-INF/LICENSE'

        //这个是在同时使用butterknife、dagger2做的一个处理。同理，遇到类似的问题，只要根据gradle的提示，做类似处理即可。
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    //程序在编译的时候会检查lint，有任何错误提示会停止build，我们可以关闭这个开关
//    lintOptions {
//        abortOnError false //即使报错也不会停止打包
//        checkReleaseBuilds false  //打包release版本的时候进行检测
//    }

    flavorDimensions "color"
    productFlavors {
        wandoujia {}
        xiaomi {}
        _360 {}
        //...
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment:2.2.2'
    implementation 'androidx.navigation:navigation-ui:2.2.2'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
